;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/23/2019
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8535
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 128
;*******************************************************/
;
;#include <mega8535.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Declare your global variables here
;
;//------------------------------------------------------------------------------------------
;     #define F_CPU 8000000ul
;#include <io.h>
;#include <delay.h>
;#include <avr/interrupt.h>
;
;/***MACROS*/
;
;#define USART_BAUDRATE 9600
;#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)
;
;#define uchar unsigned char
;#define uint unsigned int
;
;#define LCDPORTDIR DDRB
;#define LCDPORT PORTB
;#define rs 0
;#define rw 1
;#define en 2
;
;#define RSLow (LCDPORT&=~(1<<rs))
;#define RSHigh (LCDPORT|=(1<<rs))
;#define RWLow (LCDPORT&=~(1<<rw))
;#define ENLow (LCDPORT&=~(1<<en))
;#define ENHigh (LCDPORT|=(1<<en))
;
;#define KeyPORTdir DDRA
;#define key PINA
;#define KeyPORT PORTA
;//After this, we have declared some variables and arrays for fingerprint command and response. We have also added some f ...
;
;
;  void RTC_stp()
; 0000 0040 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0041 TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);           //stop communication
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0042 }
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;
;void RTC_read()
; 0000 0045 {
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0046 TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0047 while((TWCR&0x80)==0x00);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0048 TWDR=0xD0;                                         //RTC write (slave address)
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0049 TWCR=(1<<TWINT)|(1<<TWEN);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 004A while(!(TWCR&(1<<TWINT)));
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 004B TWDR=0x00;                                         //RTC write (word address)
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 004C TWCR=(1<<TWINT)|(1<<TWEN);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 004D while(!(TWCR&(1<<TWINT)));
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 004E TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);              //start RTC  communication again
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 004F while ((TWCR&0x80)==0x00);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0050 TWDR=0xD1;                                        // RTC command to read
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0051 TWCR=(1<<TWINT)|(1<<TWEN);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0052 while(!(TWCR&(1<<TWINT)));
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0053 }
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;
;void serialbegin()
; 0000 0056 {
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0057   UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0058   UBRRH = (BAUD_PRESCALE >> 8);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0059   UBRRL = BAUD_PRESCALE;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 005A   UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 005B   sei();
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 005C }
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;
;ISR(USART_RXC_vect)
; 0000 005E void USART_RXC_vect (void) __attribute__ ((signal,used)) ;     void USART_RXC_vect (void)
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
